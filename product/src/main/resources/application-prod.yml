server:
  port: 8080

eureka:
  client:
    enabled: false

spring:
  config:
    activate:
      on-profile: prod
  application:
    name: product-service
  redis:
    host: redis-service
    port: 6379
  # 아래는 jdbc의 기본 db 관련 설정인데, jdbc 뿐만 아니라 mybatis / jpa 등 spring의 대부분의 DB 기술에 동일하게 사용
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:3306/ordermsa
    username: admin
    password: ${DB_PW}
    hikari: 
      maximum-pool-size: 1
  jpa:
    database: mysql
    # innoDB를 쓰겠다 라는 설정
    database-platform: org.hibernate.dialect.MariaDBDialect
    # ddl 문 자동생성 여부 true. 테이블은 자동생성(반영)해주나, 스키마는 반드시 사전에 생성 필요
    generate-ddl: true
    # jpa(인터페이스)의 실질적인 구현체는 hibernate 이다.
    hibernate:
      # create : 매번 table을 drop후 재 생성
      # update : entity 변경사항만 alter를 적용하고 기존 데이터 유지
      # validate : 실제 DB와의 차이점을 check만 하고 ddl 문 실행 x, 콘솔로만 변경사항 출력.
      ddl-auto: create
    # 콘솔창에 ddl, dml 등의 쿼리를 출력하여 보여주는 옵션
    show_sql: true
  kafka:
    kafka-server: kafka-service:9092
    consumer:
      # group id는 컨슈머 그룹을 식별하는 id로서, 동일한 그룹 id를 가진 consumer들은 message를 분담해서 consume한다.
      # 그런데, 만약 컨슈머가 서로 다른 group-id를 가지고 한 topic을 consume하면 message를 각기 수신하는 pub/sub 효과 발
      group-id: product-group
      # 가장 처음 들어온 메시지부터 읽기 시작(latest: 현시점 이후로 들어오는 메시지만 읽음)
      auto-offset-reset: earliest
  servlet:
    multipart:
      # spring의 디폴트 사이즈 10MB
      max-file-size: 1000MB
      max-request-size: 1000MB

# aws s3 접근하기 위한 계정 세팅
cloud:
  aws:
    credentials:
      access-key: xxxx
      secret-key: yyyy
    region:
      static: ap-northeast-2
    s3:
      bucket: eunduk-board-bucket
